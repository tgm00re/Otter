{"ast":null,"code":"var _jsxFileName = \"/Users/thomasmoore/Documents/Personal Projects/Otter/src/main/myapp/src/Components/TweetForm.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useState } from 'react';\nimport placeholderImg from '../Static/Images/placeholder-img.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TweetForm() {\n  _s();\n\n  const [message, setMessage] = useState(\"\");\n  const [messageError, setMessageError] = useState(\"\");\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    if (message.length !== 0) {\n      const post = {\n        message: message\n      };\n      const currentId = sessionStorage.getItem(\"user_id\");\n      const getUserLink = \"http://localhost:8080/api/users/\" + currentId; //First, we make a call to the api to find the current logged-in user. Then we add that user to the post object.\n\n      axios.get(getUserLink, currentId).then(res => {\n        post.user = res.data;\n        axios.post(\"http://localhost:8080/api/posts/create\", post).then(response => console.log(response.data)).catch(error => console.log(error.response));\n      }).catch(err => console.log(err));\n      setMessage(\"\");\n      setMessageError(\"\");\n    }\n  }\n\n  function checkMessage(e) {\n    if (e.target.value.length === 0) {\n      setMessageError(\"You can't make a blank tweet!\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"tweet-form\",\n    className: \"pb-2\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"px-1 mt-2 d-flex align-items-start\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"tweet-form-profile-img-container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: placeholderImg,\n          alt: \"\",\n          className: \"rounded-circle\",\n          id: \"tweet-form-profile-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"w-100 mx-3 text-end\",\n        onSubmit: e => handleSubmit(e),\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"What's happening?\",\n          className: \"w-100 bg-transparent border-0\",\n          rows: \"3\",\n          id: \"tweet-form-input\",\n          maxLength: \"200\",\n          value: message,\n          onInput: e => {\n            checkMessage(e);\n            setMessage(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-danger\",\n          children: messageError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary rounded-pill p-2\",\n          id: \"tweet-submit\",\n          children: \"Tweet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TweetForm, \"xyKL3ztzd/rZBQEPqj4zLuRfe9g=\");\n\n_c = TweetForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"TweetForm\");","map":{"version":3,"sources":["/Users/thomasmoore/Documents/Personal Projects/Otter/src/main/myapp/src/Components/TweetForm.jsx"],"names":["axios","React","useState","placeholderImg","TweetForm","message","setMessage","messageError","setMessageError","handleSubmit","e","preventDefault","length","post","currentId","sessionStorage","getItem","getUserLink","get","then","res","user","data","response","console","log","catch","error","err","checkMessage","target","value"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport React, { useState } from 'react'\nimport placeholderImg from '../Static/Images/placeholder-img.png'\n\nexport default function TweetForm() {\n    const [message, setMessage] = useState(\"\");\n    const [messageError, setMessageError] = useState(\"\");\n\n    function handleSubmit(e){\n        e.preventDefault();\n\n        if(message.length !== 0){\n            const post={\n                message: message\n            }\n            const currentId = sessionStorage.getItem(\"user_id\");\n            const getUserLink = \"http://localhost:8080/api/users/\" + currentId;\n            //First, we make a call to the api to find the current logged-in user. Then we add that user to the post object.\n            axios.get(getUserLink, currentId)\n            .then(res => {\n                post.user = res.data;\n                axios.post(\"http://localhost:8080/api/posts/create\", post)\n                .then(response => console.log(response.data))\n                .catch(error => console.log(error.response))\n            })\n            .catch(err => console.log(err));\n            setMessage(\"\");\n            setMessageError(\"\");\n        }        \n    }\n\n    function checkMessage(e){\n        if(e.target.value.length === 0){\n            setMessageError(\"You can't make a blank tweet!\")\n        }\n    }\n\n\n    return (\n        <div id=\"tweet-form\" className=\"pb-2\">\n            <div className=\"px-1 mt-2 d-flex align-items-start\">\n                <p id=\"tweet-form-profile-img-container\">\n                    <img src={placeholderImg} alt=\"\" className=\"rounded-circle\" id=\"tweet-form-profile-img\"/>\n                </p>\n                <form className=\"w-100 mx-3 text-end\" onSubmit={e => handleSubmit(e)}>\n                    <textarea placeholder=\"What's happening?\" className=\"w-100 bg-transparent border-0\" rows=\"3\" id=\"tweet-form-input\" maxLength=\"200\" value={message} onInput={e => {\n                        checkMessage(e);\n                        setMessage(e.target.value);\n                    }}/>\n                    <p className=\"text-danger\">{messageError}</p>\n                    <button type=\"submit\" className=\"btn btn-primary rounded-pill p-2\" id=\"tweet-submit\">Tweet</button>\n                </form>\n            </div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}